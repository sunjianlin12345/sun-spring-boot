<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!--默认上下文名称为“default”-->
	<contextName>logback</contextName>

	<!--application.yml 传递参数，不能使用logback 自带的<property>标签 -->
	<!--<springProperty scope="context" name="logPath" source="logback.logdir"/>-->
	<property name="logPath" value="F:\\IDEA_Environment\\workspace\\sun-spring-boot\\logs" />
	<property name="root.log.level" value="DEBUG" />

	<!--%d{HH: mm:ss.SSS}——日志输出时间-->
	<!--%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用-->
	<!--%-5level——日志级别，并且使用5个字符靠左对齐-->
	<!--%logger{36}——日志输出者的名字-->
	<!--%msg——日志消息-->
	<!--%n——平台的换行符-->

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
		</encoder>
	</appender>
	<!-- Output to Console -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<!--<layout class="ch.qos.logback.classic.PatternLayout">-->
			<!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
		<!--</layout>-->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
		</encoder>
	</appender>

	<!--获取时间戳字符串:-->
	<!--key: 标识此<timestamp> 的名字；-->
	<!--datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。-->
	<timestamp key="byDay" datePattern="yyyy_MM_dd" />

	<!-- Output to File -->
	<appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，-->
		<!--所以我们使用下面的策略，可以避免输出 Error 的日志-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 DEBUG-->
			<level>DEBUG</level>
			<!--匹配到就禁止-->
			<onMatch>DENY</onMatch>
			<!--没有匹配到就允许-->
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则-->
		<!--如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天-->
		<!--的日志改名为今天的日期。即，<File> 的日志都是当天的。-->
		<!--<file>${logPath}\${byDay}.log</file>-->
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
			<fileNamePattern>${logPath}\%d{yyyy-MM-dd}.log</fileNamePattern>
		</rollingPolicy>
		<!--日志输出编码格式化-->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%date %level [%thread] %logger{36} [%file : %line] %msg%n</pattern>
		</encoder>
		<!--日志文件最大的大小-->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<MaxFileSize>20MB</MaxFileSize>
		</triggeringPolicy>
	</appender>

	<!--每天生成一个日志文件，保存30天的日志文件。-->
	<!--<appender name="FILE-time" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
		<!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
			<!--<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>-->
			<!--<maxHistory>30</maxHistory>-->
		<!--</rollingPolicy>-->
		<!--<encoder>-->
			<!--<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
		<!--</encoder>-->
	<!--</appender>-->

	<!--按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。-->
	<!--<appender name="FILE-length" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
		<!--<file>test.log</file>-->
		<!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
			<!--<fileNamePattern>tests.%i.log.zip</fileNamePattern>-->
			<!--<minIndex>1</minIndex>-->
			<!--<maxIndex>3</maxIndex>-->
		<!--</rollingPolicy>-->
		<!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
			<!--<maxFileSize>5MB</maxFileSize>-->
		<!--</triggeringPolicy>-->
		<!--<encoder>-->
			<!--<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
		<!--</encoder>-->
	<!--</appender>-->

	<root level="${root.log.level}">
		<appender-ref ref="CONSOLE" />
		<!--<appender-ref ref="FILE" />-->
	</root>

	<logger name="com.sunjianlin.sunspringboot.dao" level="debug" additivity="false">
		<appender-ref ref="CONSOLE" />
	</logger>
	<logger name="org.springframework" level="WARN"/>
	<logger name="org.hibernate" level="WARN"/>
	<logger name="org.mybatis" level="WARN"/>

</configuration>